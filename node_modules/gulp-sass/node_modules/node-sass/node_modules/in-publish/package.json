{
  "name": "in-publish",
  "version": "2.0.0",
  "description": "Detect if we were run as a result of `npm publish`",
  "main": "index.js",
  "bin": {
    "in-publish": "in-publish.js",
    "in-install": "in-install.js",
    "not-in-publish": "not-in-publish.js",
    "not-in-install": "not-in-install.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/iarna/in-publish"
  },
  "author": {
    "name": "Rebecca Turner",
    "email": "me@re-becca.org"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/iarna/in-publish/issues"
  },
  "homepage": "https://github.com/iarna/in-publish",
  "readme": "in-publish\n==========\n\nDetect if we were run as a result of `npm publish`. This is intended to allow you to\neasily have prepublish lifecycle scripts that don't run when you run `npm install`.\n\n```\n$ npm install --save in-publish\nin-publish@1.0.0 node_modules/in-publish\n```\n\nThen edit your package.json to have:\n\n```json\n  \"scripts\": {\n    \"prepublish\": \"in-publish && thing-I-dont-want-on-dev-install || not-in-publish\"\n  }\n```\n\nNow when you run:\n\n```\n$ npm install\n```\nThen `thing-I-dont-want-on-dev-install` won't be run, but...\n\n```\n$ npm publish\n```\nAnd `thing-I-dont-want-on-dev-install` will be run.\n\nIt's worth noting that the `prepublish` lifecycle is _ALSO_ called when you build a tarball, so:\n\n```\n$ npm pack\n```\n\nWill call your `prepublish` lifecycle, but with the examplea above,\n`thing-I-dont-want-on-dev-install` won't be run.\n\nIf you want this, you can use another helper included here:\n\n```json\n  \"scripts\": {\n    \"prepublish\": \"not-in-install && thing-I-dont-want-on-dev-install || in-install\"\n  }\n```\n\nThe above will run your `thing-I-dont-want-on-dev-install` on `publish` and\non `pack` but not on `install`.\n",
  "readmeFilename": "README.md",
  "_id": "in-publish@2.0.0",
  "_from": "in-publish@^2.0.0"
}
